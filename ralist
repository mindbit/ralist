#!/usr/bin/php -q
<?php
// Recursive archive lister

set_error_handler(function ($severity, $message, $file, $line) {
    throw new ErrorException($message, 0, $severity, $file, $line);
});

// File type constants, from "man 2 stat"
define('S_IFMT',    0170000);
define('S_IFSOCK',  0140000);
define('S_IFLNK',   0120000);
define('S_IFREG',   0100000);
define('S_IFBLK',   0060000);
define('S_IFDIR',   0040000);
define('S_IFCHR',   0020000);
define('S_IFIFO',   0010000);

define('S_ISUID',   04000);
define('S_ISGID',   02000);
define('S_ISVTX',   01000);

define('S_IRWXU',   00700);
define('S_IRUSR',   00400);
define('S_IWUSR',   00200);
define('S_IXUSR',   00100);

define('S_IRWXG',   00070);
define('S_IRGRP',   00040);
define('S_IWGRP',   00020);
define('S_IXGRP',   00010);

define('S_IRWXO',   00007);
define('S_IROTH',   00004);
define('S_IWOTH',   00002);
define('S_IXOTH',   00001);

class Arlist {
    protected $cacheStack = array();
    protected $cachePath;
    protected $startPath;
    protected $outPath;
    protected $outFile;

    protected static $typeMap = array(
        S_IFSOCK    => 's',
        S_IFLNK     => 'l',
        S_IFREG     => '-',
        S_IFBLK     => 'b',
        S_IFDIR     => 'd',
        S_IFCHR     => 'c',
        S_IFIFO     => 'f'
    );

    protected static $archMap = array(
        '.tar.gz'   => array('xTar', '-z'),
        '.tgz'      => array('xTar', '-z'),
        '.tar.bz2'  => array('xTar', '-j'),
        '.tbz2'     => array('xTar', '-j'),
        '.tar.xz'   => array('xTar', '-J'),
        '.txz'      => array('xTar', '-J'),
        '.tar'      => array('xTar'),
        '.iso'      => array('x7za'),
        '.7z'       => array('x7za'),
        '.zip'      => array('x7za'),
    );

    public static function getType($m)
    {
        return (self::$typeMap[$m & S_IFMT] ?: '?') .
            self::getMode($m, S_ISUID, S_IRUSR, S_IWUSR, S_IXUSR, 'sS') .
            self::getMode($m, S_ISGID, S_IRGRP, S_IWGRP, S_IXGRP, 'sS') .
            self::getMode($m, S_ISVTX, S_IROTH, S_IWOTH, S_IXOTH, 'tT');
    }

    public static function getMode($m, $s, $r, $w, $x, $chr)
    {
        $s &= $m;
        return ($m & $r ? 'r' : '-') . ($m & $w ? 'w' : '-') .
            ($m & $x ? ($s ? $chr[0] : 'x') : ($s ? $chr[1] : '-'));
    }

    public static function major($dev)
    {
        return $dev >> 8;
    }

    public static function minor($dev)
    {
        return $dev & 0xff;
    }

    public function __construct($path)
    {
        $this->cachePath = $path . '/.arlist.cache';
        $this->startPath = $path;
        $this->outPath = $path . '/.arlist.out';
    }

    public function run()
    {
        if (!is_dir($this->cachePath))
            mkdir($this->cachePath);

        $this->outFile = fopen($this->outPath, 'w');
        $this->recurseIntoDir($this->startPath, '');
        fclose($this->outFile);
    }

    protected function recurseIntoDir($fsPath, $idxPath)
    {
        foreach (scandir($fsPath) as $item) {
            if ($item == '.' || $item == '..')
                continue;

            $path = $fsPath . '/' . $item;
            if ($path == $this->cachePath || $path == $this->outPath)
                continue;

            $idxSub = $idxPath . $item . '/';
            $stat = lstat($path);
            $type = $stat['mode'] & S_IFMT;

            $link = null;
            if ($type == S_IFLNK)
                $link = readlink($path);
            $this->emit($stat, $idxPath . $item, $link);

            if ($type == S_IFDIR) {
                $this->recurseIntoDir($path, $idxSub);
                continue;
            }

            if ($type != S_IFREG)
                continue;

            foreach (self::$archMap as $ext => $args) {
                if (substr($item, -strlen($ext)) !== $ext)
                    continue;

                $this->recurseIntoArchive($path, $idxSub, $args);
                break;
            }
        }
    }

    protected function recurseIntoArchive($fsPath, $idxPath, $args)
    {
        $method = array_shift($args);
        $tmp = exec('mktemp -d');
        array_unshift($args, $fsPath, $tmp);
        call_user_func_array(array($this, $method), $args);
        $this->recurseIntoDir($tmp, $idxPath);
        exec(sprintf('rm -rf %s', escapeshellarg($tmp)));
    }

    protected function emit($stat, $name, $link)
    {
        $link = $link === null ? '' : ' -> ' . $link;
        $size = $stat['size'];
        $type = $stat['mode'] & S_IFMT;
        if ($type == S_IFCHR || $type == S_IFBLK)
            $size = sprintf('%d, %d',
                self::major($stat['rdev']), self::minor($stat['rdev']));
        printf("%s %d %5d %5d %10s %s %s\n",
            self::getType($stat['mode']),
            $stat['nlink'],
            $stat['uid'], $stat['gid'], $size,
            gmdate('Y-m-d H:i:s', $stat['mtime']),
            $name . $link);
    }

    protected function x7za($src, $dst)
    {
        $src = realpath($src);
        $tmp = exec('mktemp');
        $cmd = sprintf('7za x -o%s %s &> %s',
            escapeshellarg($dst),
            escapeshellarg($src),
            escapeshellarg($tmp)
        );
        exec($cmd, $out, $ret);
        if ($ret) {
            $err = sprintf(
                'Bad exit status %d extracting %s - log in %s',
                $ret, $src, $tmp
            );
            throw new Exception($err);
        }
        unlink($tmp);
    }

    protected function xTar($src, $dst, $filter = '')
    {
        $tmp = exec('mktemp');
        $cmd = sprintf('tar --numeric-owner %s -xf %s -C %s &> %s',
            $filter,
            escapeshellarg($src),
            escapeshellarg($dst),
            escapeshellarg($tmp)
        );
        exec($cmd, $out, $ret);
        if ($ret) {
            $err = sprintf(
                'Bad exit status %d extracting %s - log in %s',
                $ret, $src, $tmp
            );
            throw new Exception($err);
        }
        unlink($tmp);
    }
}

if ($_SERVER['argc'] <= 1) {
    printf("Usage: %s <path>\n", $_SERVER['argv'][0]);
    exit(1);
}

$arlist = new Arlist($_SERVER['argv'][1]);
$arlist->run();
