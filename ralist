#!/usr/bin/php -q
<?php
// Recursive archive lister

set_error_handler(function ($severity, $message, $file, $line) {
    throw new ErrorException($message, 0, $severity, $file, $line);
});

// File type constants, from "man 2 stat"
define('S_IFMT',    0170000);
define('S_IFSOCK',  0140000);
define('S_IFLNK',   0120000);
define('S_IFREG',   0100000);
define('S_IFBLK',   0060000);
define('S_IFDIR',   0040000);
define('S_IFCHR',   0020000);
define('S_IFIFO',   0010000);

define('S_ISUID',   04000);
define('S_ISGID',   02000);
define('S_ISVTX',   01000);

define('S_IRWXU',   00700);
define('S_IRUSR',   00400);
define('S_IWUSR',   00200);
define('S_IXUSR',   00100);

define('S_IRWXG',   00070);
define('S_IRGRP',   00040);
define('S_IWGRP',   00020);
define('S_IXGRP',   00010);

define('S_IRWXO',   00007);
define('S_IROTH',   00004);
define('S_IWOTH',   00002);
define('S_IXOTH',   00001);

class Arlist {
    protected $cacheStack = array();
    protected $cachePath;
    protected $startPath;
    protected $outPath;
    protected $outFile;

    protected static $typeMap = array(
        S_IFSOCK    => 's',
        S_IFLNK     => 'l',
        S_IFREG     => '-',
        S_IFBLK     => 'b',
        S_IFDIR     => 'd',
        S_IFCHR     => 'c',
        S_IFIFO     => 'f'
    );

    public static function getType($m)
    {
        return (self::$typeMap[$m & S_IFMT] ?: '?') .
            self::getMode($m, S_ISUID, S_IRUSR, S_IWUSR, S_IXUSR, 'sS') .
            self::getMode($m, S_ISGID, S_IRGRP, S_IWGRP, S_IXGRP, 'sS') .
            self::getMode($m, S_ISVTX, S_IROTH, S_IWOTH, S_IXOTH, 'tT');
    }

    public static function getMode($m, $s, $r, $w, $x, $chr)
    {
        $s &= $m;
        return ($m & $r ? 'r' : '-') . ($m & $w ? 'w' : '-') .
            ($m & $x ? ($s ? $chr[0] : 'x') : ($s ? $chr[1] : '-'));
    }

    public function __construct($path)
    {
        $this->cachePath = $path . '/.arlist.cache';
        $this->startPath = $path;
        $this->outPath = $path . '/.arlist.out';
    }

    public function run()
    {
        if (!is_dir($this->cachePath))
            mkdir($this->cachePath);

        $this->outFile = fopen($this->outPath, 'w');
        $this->recurseIntoDir($this->startPath, '');
        fclose($this->outFile);
    }

    protected function recurseIntoDir($fsPath, $idxPath)
    {
        foreach (scandir($fsPath) as $item) {
            if ($item == '.' || $item == '..')
                continue;

            $path = $fsPath . '/' . $item;
            if ($path == $this->cachePath || $path == $this->outPath)
                continue;

            $stat = lstat($path);
            $type = $stat['mode'] & S_IFMT;

            $link = null;
            if ($type == S_IFLNK)
                $link = readlink($path);
            $this->emit($stat, $idxPath . $item, $link);

            if ($type == S_IFDIR) {
                $this->recurseIntoDir($path, $idxPath . $item . '/');
                continue;
            }

            if ($type != S_IFREG)
                continue;
        }
    }

    protected function emit($stat, $name, $link)
    {
        $link = $link === null ? '' : ' -> ' . $link;
        printf("%s %d %5d %5d %10d %s %s\n",
            self::getType($stat['mode']),
            $stat['nlink'],
            $stat['uid'], $stat['gid'], $stat['size'],
            gmdate('Y-m-d H:i:s', $stat['mtime']),
            $name . $link);
    }

}

if ($_SERVER['argc'] <= 1) {
    printf("Usage: %s <path>\n", $_SERVER['argv'][0]);
    exit(1);
}

$arlist = new Arlist($_SERVER['argv'][1]);
$arlist->run();
